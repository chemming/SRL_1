//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections.Generic;

public class AIState
{
	private List<AIState> childStates;
	private List<AIState> peerStates;
	private AIState childActive;
	private AIState childDefault;
	private AIState parent;
	private string s_name;

	private AIController controller;
	private bool active;

	public AIState (AIController cont, string label)
	{
		s_name = label;
		childStates = new List<AIState> ();
		peerStates = new List<AIState> ();
	}


	public string Name
	{
		get
		{
			return s_name;
		}
	}

	public void Run()
	{
		if (!active)
			return;
		Think ();
		if(childActive != null)
			childActive.Run();
	}

	virtual public void Think()
	{

	}

	public bool IsRoot
	{ 
		get
		{
			if(parent == null)
				return true;
			return false;
		}
	}


	public bool IsLeaf
	{ 
		get
		{
			if(childDefault == null)
				return true;
			return false;
		}
	}


	private void AddChild(AIState childState, bool isDefault)
	{
		foreach(AIState childState2 in childStates)
		{
			childState2.peerStates.Add(childState);
			childState.peerStates.Add(childState2);
		}

		childStates.Add (childState);
		if(isDefault)
			childDefault = childState;
		childState.parent = this;
	}

	private bool Active
	{
		set
		{
			SynchActivate(value);
			active = value;
		}
		get
		{
			if (parent != null)
				parent.childActive = this;
			return active;
		}

	}

	private void SynchActivate(bool value)
	{
		if(value == false)
		{
			foreach(AIState childState in childStates)
			{
				childState.Active = false;
			}
		}
		else
		{
			foreach(AIState peerState in peerStates)
			{
				peerState.Active = false;
			}
		}
	}

}
