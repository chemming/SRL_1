//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Collections;
using UnityEngine;

public class ShipSystem : MonoBehaviourThink, ITakeDamage
{
	StateManager stateManager;
	Dictionary<string,GameObject> subsystems;
	bool alive;
	private enum DeathMode {explode, fallApart, freeze, energy};
	public ShipSystem ()
	{
		subsystems = new Dictionary<string, GameObject> ();
	}

	protected void Start()
	{
		alive = true;
		subsystems ["Body"] = this.transform.FindChild("Body").gameObject;
		base.Start ();
		stateManager = GameObject.Find ("StateManager").GetComponent<StateManager>();

	}

	public GameObject this[string name]
	{
		get 
		{ 
			if(subsystems.ContainsKey(name) == false)
			{
//				Debug.Log("Subsystems: Not found (" + name + ")");
				return null;
			}
			return subsystems[name]; 
		}
		set 
		{ 
//			Debug.Log("Subsystems: Added ("+value.name+")");
			subsystems[name] = value; 
		}
	}

	public List<string> Keys
	{
		get
		{
			return new List<string>(subsystems.Keys);
		}

	}

	void OnCollisionEnter(Collision collision) 
	{
//		Debug.Log("Collided Parent");
		// Debug-draw all contact points and normals
		foreach (ContactPoint contact in collision.contacts) 
		{
			//Debug.DrawLine(contact.point + contact.normal*0.01f, contact.point+ contact.normal*7, Color.white,3f);

			//TODO: conditionally execute CapsuleCast, esp when colliding with large objects

			Ray ray = new Ray(contact.point + contact.normal*0.01f,contact.normal);
			/*
			RaycastHit hit;
			if (Physics.Raycast( ray,  out hit,7.0f) )
			{
				ShipSubsystem sub =  hit.collider.transform.gameObject.GetComponent<ShipSubsystem>();
				if(sub == null)
					sub =  hit.collider.transform.parent.gameObject.GetComponent<ShipSubsystem>();
				if(sub!= null)
					sub.DoSubsystemCollide(contact,hit.point);
			}*/
	//		Debug.Log("The Distance");
			float startDistance = -1;
			float penetrationDepth = 0.15f;
			float checkDepth = 0.3f;
			float checkRadius = 0.2f;

			foreach(RaycastHit hit in Physics.SphereCastAll(ray,checkRadius,checkDepth))
			{
				if(startDistance < 0) startDistance = hit.distance;
				if(hit.distance - startDistance + penetrationDepth > hit.distance)
				{
					//Debug.Log(hit.distance);
					ShipSubsystem sub =  hit.collider.transform.gameObject.GetComponent<ShipSubsystem>();
					//Debug.Log( sub);

					if(sub == null&& hit.collider.transform.parent != null)
						sub =  hit.collider.transform.parent.gameObject.GetComponent<ShipSubsystem>();

					if(sub!= null)
						sub.DoSubsystemCollide(contact,hit);
				}
				else
					break;
			}
		}
	}


	private void DoDeathCamera()
	{
		GameObject cGo = Instantiate (Resources.Load("Components/Ship/ShipCamera")) as GameObject;
		GameObject overCam = GameObject.Find("OverheadCamera");
		GameObject shipCam = GameObject.Find("ShipCamera");

		Camera c = cGo.GetComponent<Camera>();
		c.transform.parent = shipCam.transform;
		cGo.name = "DeathCamera(Temp)";
		PlayerController.controlMode md;
		md =(subsystems ["PlayerController"] as GameObject).GetComponent<PlayerController> ().CurrentMode ();

		if(md == PlayerController.controlMode.sensor)
		{
		//	Debug.Log("DEATH CAM");
			c.transform.position = overCam.transform.position;// + this.transform.up * 20f;
			c.transform.rotation = overCam.transform.rotation;
			c.depth = 200;
		//	UnityEditor.EditorApplication.isPaused = true;
		}
		else
		{
			c.transform.position = shipCam.transform.position 
				+ this.transform.forward * -10f 
					+ this.transform.right * -5f
					+ this.transform.up * +10f;
			c.transform.LookAt(shipCam.transform.position);
			c.depth = 200;
		}
		
		c.GetComponent<AudioListener>().enabled = false ;
	}


	private IEnumerator DieCorotune(DeathMode mode)
	{
		if (subsystems.ContainsKey("PlayerController"))
			DoDeathCamera ();
		
		alive = false;
		//Destroy (this.gameObject,0.1f);
		//stateManager.RequestState("GameMenu");
		if(mode == DeathMode.explode)
		{
			//MeshTriangles.Fracture (subsystems["Body"]);
			//subsystems["Body"].collider
			//yield return null;
			foreach(string key in Keys)
			{
				
			//	subsystems[key].transform.parent = null;
				(subsystems[key].GetComponent<MonoBehaviourThink>() ).DisableThink();
				foreach(Renderer com in subsystems[key].GetComponents<Renderer>())
				{
					if(com.enabled == false)
					{	
						yield return new WaitForSeconds(.01f);
						com.enabled = true;
					}
				}
				//foreach(MonoBehaviourThink com in subsystems[key].GetComponents<MonoBehaviourThink>())
				//{
					//com.transform.parent = null;
					//com.gameObject.AddComponent<BoxCollider>();
					//com.gameObject.AddComponent<Rigidbody>();
					//com.gameObject.rigidbody.detectCollisions  = true;
					//com.gameObject.rigidbody.useGravity = false;
					//com.gameObject.rigidbody.velocity = this.transform.rigidbody.velocity;
				//	yield return new WaitForSeconds(.1f);
				//	com.DisableThink();
				//}
				//Destroy(subsystems[key].gameObject.GetComponent<BoxCollider>());
				//yield return new WaitForSeconds(.1f);

				if(subsystems[key].GetComponent<Rigidbody>() == null && key != "Body")
				{
					subsystems[key].gameObject.AddComponent<Rigidbody>();
					subsystems[key].gameObject.GetComponent<Rigidbody>().detectCollisions  = true;
					subsystems[key].gameObject.GetComponent<Rigidbody>().useGravity = false;
					subsystems[key].gameObject.GetComponent<Rigidbody>().velocity = this.transform.GetComponent<Rigidbody>().velocity;
				}
				yield return new WaitForSeconds(0.05f);
			}
			//Destroy (this.gameObject);
			
		}
		else
		{
			
			foreach(string key in Keys)
			{
				foreach(MonoBehaviourThink com in subsystems[key].GetComponents<MonoBehaviourThink>())
				{
					//if(com as MonoBehaviourThink != null)
					//	(com as MonoBehaviourThink).DisableThink();
					com.DisableThink();
					yield return new WaitForSeconds(0.0001f);
				}
				
			}
			
		}
	
	}

	private void ShipDie(DeathMode mode)
	{
		//If we are a player!

		StartCoroutine (DieCorotune(mode));
	}

	override protected void Initalize () {}
	override protected void Think () 
	{
		if(!this.subsystems.ContainsKey("Nexus"))
			return;

		if (alive == false)
		{
			this.DisableThink ();
			return;
		}

		if(this.subsystems["Nexus"].GetComponent<NexusExternalSubsystem>() != null)
		{
			if(this.subsystems["Nexus"].GetComponent<NexusExternalSubsystem>().NexusHealth <= 1f)
			{
				ShipDie(DeathMode.explode);
			}
			if(this.subsystems["Nexus"].GetComponent<NexusExternalSubsystem>().NexusEnergy <= 0.5f)
			{
				ShipDie(DeathMode.energy);
			}

//			Debug.Log(this.subsystems["Nexus"].GetComponent<NexusExternalSubsystem>().NexusHealth );
		}

	}

	
	public void DoDamage(float number)
	{
		ShipSubsystem hull = subsystems["Body"].GetComponent<ShipHullSubsystem>();
		hull.SubHealth -= number;
	}
	
	public void DoDamage(float number, Collision collision)
	{
		ShipSubsystem hull = subsystems["Body"].GetComponent<ShipHullSubsystem>();
		hull.SubHealth -= number;
	}
	
	public void DoHeal(float number)
	{
		
	}
	public void DoHeal(float number, Collision collision)
	{
		
	}
	
	public void Die()
	{
		ShipDie (DeathMode.explode);
	}
	
	public float GetHealth()
	{
		return subsystems ["Nexus"].GetComponent<NexusExternalSubsystem> ().NexusHealth;
	}

	override protected void ThinkFast () 
	{

	}




}

