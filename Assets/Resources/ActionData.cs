//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34011
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections.Generic;
using csmatio.common;
using csmatio.io;
using csmatio.types;

public class ActionData
{
	private List<Vector3> positionVecs;
	private List<String>  positionNames;
	private Vector3  beforePos;
	private Vector3  afterPos;
	private Quaternion  beforeOrient;
	private Quaternion  afterOrient;

	private string  itemType;
	private string  robotType;
	private int iterationNum;


	//Yeah, that's right. Its all in here, like a badass would do.
	private static List<ActionData> actionList = new List<ActionData>();

	public ActionData (string robotType,string itemType,Vector3 beforePos, Vector3 afterPos,Quaternion  beforeOrient,Quaternion  afterOrient, int iterationNum) 
	{
		this.beforePos = beforePos;
		this.beforeOrient = beforeOrient;
		this.afterPos = afterPos;
		this.afterOrient = afterOrient;

		this.robotType = robotType;
		this.itemType = itemType;

		this.iterationNum = iterationNum;

		positionVecs = new List<Vector3>();
		positionNames = new List<string>();
	}

	public void AddPosition(string label,Vector3 position)
	{
		positionVecs.Add (position);
		positionNames.Add (label);
	}

	public void Store()
	{
		actionList.Add (this);
	}
	public static void SaveMatFile()
	{
		// create a MATLAB char and double variable and add it to the structure
		//MLChar scoreName = ; 
		//MLDouble scoreValue = new MLDouble("", new double[] { 12345 }, 1); 
		int maxIter = 0;
		foreach(ActionData ad in ActionData.actionList)
		{
			if(ad.iterationNum > maxIter)
			{
				maxIter = ad.iterationNum;
			}
		}
		string dateLbl = "";
		dateLbl += System.DateTime.Now.Year.ToString();
		dateLbl += System.DateTime.Now.Month.ToString();
		dateLbl += System.DateTime.Now.Day.ToString();
		dateLbl += System.DateTime.Now.ToFileTimeUtc().ToString();

		int chunkSize = 50;
		int effChunkSize = 50;
		int chunk = 0;
		int actionIndex = 0;

		List<string> fieldList = new List<string> ();
		fieldList.Add ("obstacle");
		fieldList.Add ("goal");
		fieldList.Add ("item");
		fieldList.Add ("robot");
		fieldList.Add ("selectedItem");


		while((chunk)*chunkSize < ActionData.actionList.Count)
		{
			int i = 0;
			int ii = 0;
			actionIndex = chunk*chunkSize; 
			if(chunkSize + actionIndex >= ActionData.actionList.Count)
				effChunkSize = ActionData.actionList.Count-actionIndex;
			else
				effChunkSize = chunkSize;

			MLStructure structure = new MLStructure("simDat", new int[] { effChunkSize, 1 });
			List<MLArray> mlList = new List<MLArray>(); 
			MLDouble arr;

			while(actionIndex < ActionData.actionList.Count)
			{
				ActionData ad = actionList[actionIndex] as ActionData;
				structure["speed", i] = new MLDouble("", new double[] {maxIter}, 1);
				structure["beforePos", i] = new MLDouble("", new double[] {ad.beforePos.x,ad.beforePos.y,ad.beforePos.z }, 1);
				structure["beforeOrient", i] = new MLDouble("", new double[] {ad.beforeOrient.eulerAngles.x,ad.beforeOrient.eulerAngles.y,ad.beforeOrient.eulerAngles.z}, 1);
				//Debug.Log(dateLbl+"_"+chunk+"["+i+"]" +"("+ad.beforeOrient.x+","+ad.beforeOrient.y+","+ad.beforeOrient.z+")");

				structure["afterPos", i] = new MLDouble("", new double[] {ad.afterPos.x,ad.afterPos.y,ad.afterPos.z}, 1);
				structure["afterOrient", i] = new MLDouble("", new double[] {ad.afterOrient.eulerAngles.x,ad.afterOrient.eulerAngles.y,ad.afterOrient.eulerAngles.z}, 1);
				structure["robotType", i] = new MLChar("", ad.robotType);
				structure["itemType", i] = new MLChar("", ad.itemType);
				ii=0;


				foreach(string  fieldName in fieldList)
				{
					int id = ad.positionNames.IndexOf(fieldName);
					Vector3 vecValue;
					if(id >= 0)
						vecValue = ad.positionVecs[id]; 
					else
						vecValue = new Vector3(100,100,100); // We pass an invalid value 

					structure[fieldName, i] = new MLDouble("", new double[] {vecValue.x,vecValue.y,vecValue.z}, 1);
					ii++;
				}
				i++;
				actionIndex++;
			}

			mlList.Add(structure); 

			MatFileWriter mfw = new MatFileWriter("playDat"+dateLbl+"_"+chunk+".mat", mlList, false);
			mfw.GetType();

			Debug.Log ("Saved (" + chunk + ")playDat" + dateLbl + ".mat");

			chunk ++;

			ActionData.actionList = new List<ActionData>();
		}
	}
}

