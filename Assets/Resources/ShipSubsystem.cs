//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;

abstract public class ShipSubsystem : MonoBehaviourThink
{
	protected GameObject ship;
	protected NexusExternalSubsystem nexus;

	protected ShipSystem system;
	protected IGeneralShipController pController;

	protected Material transparentMaterial;// = (Material)Resources.Load("ButtonOn", typeof(Material));
	protected Material buttonRedMaterial;// = (Material)Resources.Load("ButtonOn", typeof(Material));
	protected Material buttonYellowMaterial;// = (Material)Resources.Load("ButtonOn", typeof(Material));
	protected Material buttonOnMaterial;// = (Material)Resources.Load("ButtonOn", typeof(Material));
	protected Material buttonPressMaterial;// = (Material)Resources.Load("ButtonOn", typeof(Material));
	protected Material buttonOffMaterial;// = (Material)Resources.Load("ButtonOff", typeof(Material));
	protected Material defaultMaterial;// = (Material)Resources.Load("ButtonOff", typeof(Material));


	// Standard system properties Health and Metal
	protected bool g_criticalSystem; // Is required for the ship to operate. Like Sensors.
	protected float g_health; 
	protected float g_maxHealth; 
	protected float g_metal; 
	protected bool g_showOnPanel; // Is this a component for the player to cusomize? 
	protected float g_power; //Power. Some systems may have "power". IE - a "level".
	protected GameObject g_icon;
	// Standard "Storage" attributes
	protected float g_heldOxygen; 
	protected float g_maxOxygen;
	protected float g_heldMetal; 
	protected float g_maxMetal;
	protected float g_heldEnergy; // Amout of energy the component stores
	protected float g_maxEnergy; 
	protected GameObject g_storedItem; // Some items exist just to cary other items

	// Dynamic Cost attributes
	protected float g_passiveOxygenCost; 
	protected float g_activeOxygenCost; 
	protected float g_passiveEnergyCost; // Amout of energy subtracted per 'think'
	protected float g_activeEnergyCost; //Energy used per "use" 
	protected float g_passiveMetalCost; 
	protected float g_activeMetalCost; 

	protected string g_displayName; 
	protected string g_displayDescription; 




	//Status - the cool part.
	public enum Status {deactivated, minimal, active};
	protected Status g_status; 

	protected string g_name;
	public ShipSubsystem ()
	{
		buttonRedMaterial = (Material)Resources.Load("ButtonRed", typeof(Material));
		buttonYellowMaterial = (Material)Resources.Load("ButtonYellow", typeof(Material));
		buttonOnMaterial = (Material)Resources.Load("ButtonOn", typeof(Material));
		buttonOffMaterial = (Material)Resources.Load("ButtonOff", typeof(Material));
		buttonPressMaterial = (Material)Resources.Load("ButtonPress", typeof(Material));
		transparentMaterial = (Material)Resources.Load("Transparent", typeof(Material));
		g_displayName = "Name";
		g_displayDescription = "This is a description.";

		g_criticalSystem = false; // Is required for the ship to operate. Like Sensors.
		g_health = 100; 
		g_maxHealth = 100; 
		g_metal = 10; 
		g_showOnPanel = true; // Is this a component for the player to cusomize? 
		g_power = 1; //Power. Some systems may have "power". IE - a "level".
		g_icon = null;
		
		// Standard "Storage" attributes
		g_heldOxygen = 0; 
		g_maxOxygen = 0;
		g_heldMetal = 0; 
		g_maxMetal = 0;
		g_heldEnergy = 0; // Amout of energy the component stores
		g_maxEnergy = 0; 
		g_storedItem = null; // Some items exist just to cary other items

		// Dynamic Cost attributes
		g_passiveOxygenCost = 0; 
		g_activeOxygenCost = 0; 
		g_passiveEnergyCost = 0; // Amout of energy subtracted per 'think'
		g_activeEnergyCost = 0; //Energy used per "use" 
		g_passiveMetalCost = 0; // Amout of energy subtracted per 'think'
		g_activeMetalCost = 0; 

		g_status = Status.active; // Things default on and stuff

		g_name = "Default Name";


		//com.gameObject.AddComponent<BoxCollider>();
		//	Destroy(com.gameObject.GetComponent<BoxCollider>());

	}
	

	
	// Get Methods:
	public string SubName()
	{
		return g_name;
	}
	

	void Start () 
	{
		GameObject obj = this.gameObject;
		while(obj.GetComponent<ShipSystem>() == null)
		{
			if(obj.transform.parent == null)
				throw new Exception("No parent to add subsystem to");
			obj = obj.transform.parent.gameObject;
		}
		system = obj.GetComponent<ShipSystem>() ;
		ship = obj; // The chasis of the ship is important

		system [this.name] = this.gameObject;

		base.Start();
	}

	protected override void ThinkAlpha()
	{
		if (this.transform.parent == null)
		{
			Detatch ();
			return;
		}
		if(nexus == null && system ["Nexus"] != null)
			nexus = system["Nexus"].GetComponent<NexusExternalSubsystem>();
		if(nexus == null)
			return;

		if (pController == null)
		{
			if(system ["PlayerController"] != null && system ["PlayerController"].GetComponent<PlayerController>() != null)
				pController = system ["PlayerController"].GetComponent<PlayerController>() as IGeneralShipController;
			if(system ["AIController"] != null && system ["AIController"].GetComponent<AIController>() != null)
				pController = system ["AIController"].GetComponent<AIController>() as IGeneralShipController;
		}

		if (pController == null)
			return;

		bool allowed = nexus.AddEnergyCharge (-SubCostEnergyPassive);
		if (allowed == false)
			SubStatus = Status.deactivated;

		allowed = nexus.AddOxygenCharge(-SubCostOxygenPassive);
		if (allowed == false)
			SubStatus = Status.deactivated;
	
		allowed = nexus.AddMetalCharge(-SubCostMetalPassive);
		if (allowed == false)
			SubStatus = Status.deactivated;

		if(pController as AIController != null)
		{
			if(name != "Body")
			{
				foreach(Renderer rend in this.transform.GetComponentsInChildren<Renderer>())
				{
					rend.enabled = false;
				}
			}
		}

	}

	protected virtual void PlayerInteract(Vector3 position,bool focused)
	{


	}

	public void Detatch()
	{
		DisableThink ();
	}

	public void CursorHover(Vector3 position,bool focused = false)
	{
		foreach(Transform child in this.transform )
		{
			if(child.gameObject.GetComponent<Renderer>() != null)
			{
				if(child.gameObject.GetComponent<Renderer>().material.shader!= buttonOnMaterial.shader)
				{
					defaultMaterial = child.gameObject.GetComponent<Renderer>().material;
					//Debug.Log(child.gameObject.renderer.material.name + " --- " + buttonOnMaterial.name);
				}

				if(focused == false)
					child.gameObject.GetComponent<Renderer>().material = buttonOnMaterial;
				else if(defaultMaterial != null &&
				        child.gameObject.GetComponent<Renderer>().material.shader!= defaultMaterial.shader)
					child.gameObject.GetComponent<Renderer>().material = defaultMaterial;

			}
		}

		this.PlayerInteract(position,focused);
	}


	public void CursorLeave()
	{
		//Debug.Log (defaultMaterial);
		foreach(Transform child in this.transform )
		{
			if(child.gameObject.GetComponent<Renderer>() != null)
				child.gameObject.GetComponent<Renderer>().material = defaultMaterial;
		}
	}

	//Properties
	public Status SubStatus
	{
		get
		{
			return g_status;
		}
		
		set
		{
			if( g_health/g_maxHealth > 0.666 && value == Status.active) 
				g_status = value;
			if( g_health> 0 && value == Status.minimal) 
				g_status = value;
		}
		
	}
	// Standard system properties Health and Metal
	//protected bool g_criticalSystem; // Is required for the ship to operate. Like Sensors.
	public bool SubCritical
	{
		get
		{
			return g_criticalSystem;
		}
		
		set
		{
			g_criticalSystem = value;
		}
		
	}
	//protected float g_health; 
	public float SubHealth
	{
		get
		{
			return g_health;
		}
		
		set
		{

			g_health = value;
			if(g_health <0)
				g_health = 0;
		}
		
	}
	//protected float g_maxHealth; 
	public float SubMaxHealth
	{
		get
		{
			return g_maxHealth;
		}
		
		set
		{
			g_maxHealth = value;
		}
		
	}
	//protected float g_metal; 
	public float SubMetal
	{
		get
		{
			return g_metal;
		}
		
		set
		{
			g_metal = value;
		}
		
	}
	//protected float g_showOnPanel; // Is this a component for the player to cusomize? 
	public bool SubShowOnPanel
	{
		get
		{
			return g_showOnPanel;
		}
		
		set
		{
			g_showOnPanel = value;
		}
		
	}
	//protected float g_power; //Power. Some systems may have "power". IE - a "level".
	public float SubPower
	{
		get
		{
			return g_power;
		}
		
		set
		{
			g_power = value;
		}
		
	}
	//protected GameObject g_icon;
	public GameObject SubIcon
	{
		get
		{
			return g_icon;
		}
		
		set
		{
			g_icon = value;
		}
		
	}	
	// Standard "Storage" attributes
	//protected float g_heldOxygen; 
	public float SubStoreOxygen
	{
		get
		{
			return g_heldOxygen;
		}
		
		set
		{
			g_heldOxygen = value;
		}
		
	}	
	//protected float g_maxOxygen;
	public float SubStoreMaxOxygen
	{
		get
		{
			return g_maxOxygen;
		}
		
		set
		{
			g_maxOxygen = value;
		}
		
	}	
	//protected float g_heldMetal; 
	public float SubStoreMetal
	{
		get
		{
			return g_heldMetal;
		}
		
		set
		{
			g_heldMetal = value;
		}
		
	}	
	//protected float g_maxMetal;
	public float SubStoreMaxMetal
	{
		get
		{
			return g_maxMetal;
		}
		
		set
		{
			g_maxMetal = value;
		}
		
	}	
	//protected float g_heldEnergy; // Amout of energy the component stores
	public float SubStoreEnergy
	{
		get
		{
			return g_heldEnergy;
		}
		
		set
		{
			g_heldEnergy = value;
		}
		
	}	
	//protected float g_maxEnergy; 
	public float SubStoreMaxEnergy
	{
		get
		{
			return g_maxEnergy;
		}
		
		set
		{
			g_maxEnergy = value;
		}
		
	}	
	//protected GameObject g_storedItem; // Some items exist just to cary other items
	public GameObject SubStoreItem
	{
		get
		{
			return g_storedItem;
		}
		
		set
		{
			g_storedItem = value;
		}
		
	}		
	// Dynamic Cost attributes
	//protected float g_passiveOxygenCost; 
	public float SubCostOxygenPassive
	{
		get
		{
			return g_passiveOxygenCost;
		}
		
		set
		{
			g_passiveOxygenCost = value;
		}
		
	}	
	//protected float g_activeOxygenCost; 
	public float SubCostOxygenActive
	{
		get
		{
			return g_activeOxygenCost;
		}
		
		set
		{
			g_activeOxygenCost = value;
		}
		
	}	
	//protected float g_passiveEnergyCost; // Amout of energy subtracted per 'think'
	public float SubCostEnergyPassive
	{
		get
		{
			return g_passiveEnergyCost;
		}
		
		set
		{
			g_passiveEnergyCost = value;
		}
		
	}	

	//protected float g_activeEnergyCost; //Energy used per "use" 
	public float SubCostEnergyActive
	{
		get
		{
			return g_activeEnergyCost;
		}
		
		set
		{
			g_activeEnergyCost = value;
		}
		
	}	

	//protected float g_passiveMetalCost; 
	public float SubCostMetalPassive
	{
		get
		{
			return g_passiveMetalCost;
		}
		
		set
		{
			g_passiveMetalCost = value;
		}
		
	}	

	//protected float g_activeMetalCost; 
	public float SubCostMetalActive
	{
		get
		{
			return g_activeMetalCost;
		}
		
		set
		{
			g_activeMetalCost = value;
		}
		
	}	


	//g_displayName = "Name";
	public string SubDisplayName
	{
		get
		{
			return g_displayName;
		}
		
		set
		{
			g_displayName = value;
		}
		
	}	
	//g_displayDescription = "This is a description.";

	//protected string g_displayDescription; 
	public string SubDescription
	{
		get
		{
			return g_displayDescription;
		}
		
		set
		{
			g_displayDescription = value;
		}
		
	}	

	public void DoSubsystemCollide(ContactPoint contact,RaycastHit point)
	{
//		GameObject sparks = Instantiate(Resources.Load("Environment/SparksTiny")) as GameObject;
//		sparks.transform.position = contact.point;
		Vector3 orientation = Vector3.Cross (contact.normal, this.transform.up);
//		sparks.transform.rotation = Quaternion.LookRotation(orientation,this.transform.up);
	//	sparks.transform.parent = this.transform;
		//Debug.Log ("I hit something " + this.g_displayName);
		if(this.g_health > 0)
		{
			g_health -= 40f;
			if(g_health <= 0)
			{

				g_status = Status.deactivated;
				g_health = 0f;
//				Debug.Log("System Destroyed: " + this.g_displayName);
			}

			if(g_health/g_maxHealth <= 0.6666f && g_status != Status.deactivated)
			{
//				Debug.Log("System Damaged: " + this.g_displayName);
				g_status = Status.minimal;
			}

		}

	}



	//protected string g_displayName; 

}


